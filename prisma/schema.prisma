// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Superuser {
  id          String      @default(uuid()) @id
  createdAt   DateTime  @default(now())
  updatedAt   DateTime   @updatedAt
  
  confirmCode    String?         @unique
  email String      @unique
  name  String?
  password String
}

model Author {
  id                                String                    @default(uuid()) @id
  createdAt                         DateTime                  @default(now())
  updatedAt                         DateTime                  @updatedAt
  
  email                             String                    @unique
  name                              String              
  surname                           String                    @default("not_set")
  aboutAuthor                       String?
  password                          String
  isActive                          Boolean                   @default(false)
  confirmCode                       String                    @unique
  post                              Post[]      
  comment                           Comment[]
  likePost                          LikePost?
  subcategory                       Subcategory[]
}

model Post {
  id        String     @default(uuid()) @id
  createdAt  DateTime  @default(now())
  updatedAt DateTime   @updatedAt

  title     String
  image     String?
  published Boolean @default(false)
  content String
  like    Int?
  author    Author?   @relation(fields: [authorId], references: [id])
  authorId  String?
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String
  Comment   Comment[]
  LikePost  LikePost[]
}

model Category {
  id                        String                                   @default(uuid()) @id
  createdAt                 DateTime                                 @default(now())
  updatedAt                 DateTime                                 @updatedAt

  title                     String                                   @unique    
  description               String?            
  post                      Post[]
  subcategory               Subcategory[]
}

model Subcategory {
  id                        String                                   @default(uuid()) @id
  createdAt                 DateTime                                 @default(now())
  updatedAt                 DateTime                                 @updatedAt

  title                     String                                   @unique
  description               String?
  category                  Category                                 @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId                String     
  author                    Author[]
}

model Comment {
  id String @default(uuid()) @id
  createdAt  DateTime  @default(now())
  updatedAt DateTime   @updatedAt

  description String
  post        Post      @relation(fields: [postId], references: [id])
  postId     String
  user        Author      @relation(fields: [userId], references: [id])
  userId     String
}

model LikePost {
  id String @default(uuid()) @id
  createdAt  DateTime  @default(now())
  updatedAt DateTime   @updatedAt

  user  Author    @relation(fields: [userId], references: [id])
  userId   String  @unique
  Posts   Post[]
}
